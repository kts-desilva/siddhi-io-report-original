{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"siddhi-io-report The siddhi-io-report is an extension to Siddhi which is to publish event data to a report. The report is generated in PDF format. Find some useful links below: Source code Releases Issue tracker Latest API Docs Latest API Docs is 1.0.0 . How to use Using the extension in WSO2 Stream Processor You can use this extension in the latest WSO2 Stream Processor that is a part of WSO2 Analytics offering, with editor, debugger and simulation support. This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component jar that can be found in the STREAM_PROCESSOR_HOME /lib directory. Using the extension as a java library This extension can be added as a maven dependency along with other Siddhi dependencies to your project. dependency groupId org.wso2.extension.siddhi.io.report /groupId artifactId siddhi-io-report /artifactId version x.x.x /version /dependency Jenkins Build Status Branch Build Status master Features report (Sink) Report Sink can be used to publish (write) event data which is processed within siddhi to report as PDF. How to Contribute Please report issues at GitHub Issue Tracker . Send your contributions as pull requests to master branch . Contact us Post your questions with the \"Siddhi\" tag in Stackoverflow . Siddhi developers can be contacted via the mailing lists: Developers List : dev@wso2.org Architecture List : architecture@wso2.org Support We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. For more details and to take advantage of this unique opportunity contact us via http://wso2.com/support/ .","title":"Welcome"},{"location":"#siddhi-io-report","text":"The siddhi-io-report is an extension to Siddhi which is to publish event data to a report. The report is generated in PDF format. Find some useful links below: Source code Releases Issue tracker","title":"siddhi-io-report"},{"location":"#latest-api-docs","text":"Latest API Docs is 1.0.0 .","title":"Latest API Docs"},{"location":"#how-to-use","text":"Using the extension in WSO2 Stream Processor You can use this extension in the latest WSO2 Stream Processor that is a part of WSO2 Analytics offering, with editor, debugger and simulation support. This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component jar that can be found in the STREAM_PROCESSOR_HOME /lib directory. Using the extension as a java library This extension can be added as a maven dependency along with other Siddhi dependencies to your project. dependency groupId org.wso2.extension.siddhi.io.report /groupId artifactId siddhi-io-report /artifactId version x.x.x /version /dependency","title":"How to use"},{"location":"#jenkins-build-status","text":"Branch Build Status master","title":"Jenkins Build Status"},{"location":"#features","text":"report (Sink) Report Sink can be used to publish (write) event data which is processed within siddhi to report as PDF.","title":"Features"},{"location":"#how-to-contribute","text":"Please report issues at GitHub Issue Tracker . Send your contributions as pull requests to master branch .","title":"How to Contribute"},{"location":"#contact-us","text":"Post your questions with the \"Siddhi\" tag in Stackoverflow . Siddhi developers can be contacted via the mailing lists: Developers List : dev@wso2.org Architecture List : architecture@wso2.org","title":"Contact us"},{"location":"#support","text":"We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. For more details and to take advantage of this unique opportunity contact us via http://wso2.com/support/ .","title":"Support"},{"location":"license/","text":"","title":"License"},{"location":"about/license/","text":"","title":"License"},{"location":"api/1.0.0-SNAPSHOT/","text":"API Docs - v1.0.0-SNAPSHOT Sink report (Sink) Report sink can be used to publish (write) event data which is processed within siddhiinto reports. Siddhi-io-report provides support to generate reports in PDF format. Syntax @sink(type= report , outputpath= STRING , output.format= STRING , title= STRING , description= STRING , subtitle= STRING , template= STRING , dataset= STRING , header= STRING , footer= STRING , chart= STRING , chart.title= STRING , category= STRING , series= STRING , mode= STRING , queries= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic outputpath This parameter is used to specify the report path for data to be written. STRING No No output.format This parameter is used to specify the format of the report generated. Only PDF, XLS, XLSX, CSV are supported. PDF STRING Yes No title This parameter is used to specify the title of the report none STRING Yes No description This parameter is used to specify the description of the report. none STRING Yes No subtitle This parameter is used to specify the subtitle of the report none STRING Yes No template This parameter is used to specify an external JRXML template path to generate the report. The given template will be filled and generate the report accordingly. none STRING Yes No dataset This parameter is used to specify the dataset for the external template. This value can have a static stream attribute name or a dynamic value specified by '{}'eg:sink(type='report',dataset='{symbol}', @map(type='json'));define stream (symbol string, price float, volume long); none STRING Yes No header This parameter is used to specify the header image for the report. none STRING Yes No footer This parameter is used to specify the footer image for the report none STRING Yes No chart Used to specify the chart type in the report. The value can be 'line', 'bar', 'pie', 'table'. The chart is added into the report according to the parameter value. table STRING Yes No chart.title This parameter is used to specify the title of the chart. The title is added along with the chart. none STRING Yes No category This parameter is used to specify the category variable for the chart defined. The value of this parameter will be taken as the X axis of the chart. none STRING Yes No series This parameter is used to specify the series variable for the chart. The value of this parameter will be taken as the Y axis of the chart and it is necessary to provide numerical value for this parameter. none STRING Yes No mode This parameter is used to specify the series variable for the chart. The value of this parameter will be taken as the Y axis of the chart and it is necessary to provide numerical value for this parameter. stream STRING Yes No queries This parameter is used to specify the series variable for the chart. The value of this parameter will be taken as the Y axis of the chart and it is necessary to provide numerical value for this parameter. none STRING Yes No Examples EXAMPLE 1 @sink(type= report ,outputpath= /abc/example.pdf ,@map(type= json ))define stream BarStream(symbol string, price float, volume long); Under above configuration, for an event chunck,a report of type PDF will be generated. There will be a table in the report. EXAMPLE 2 @sink(type= report ,outputpath= /abc/{symbol}.pdf ,@map(type= json ))define stream BarStream(symbol string, price float, volume long); Under above configuration, for an event chunck,a report of type PDF will be generated. The name of the report will be the first event value of the symbol parameter in the stream. There will be a table in the report. EXAMPLE 3 @sink(type= report ,outputpath= /abc/example.pdf ,description= This is a sample report for the report sink. ,title= Sample Report ,subtitle= Report sink sample ,@map(type= json ))define stream BarStream(symbol string, price float, volume long); Under above configuration, for an event chunck,a report of type PDF will be generated. There will be a table in the report.The report title, description and subtitle will include the values specified as the parameters. The report will be generated in the given output path. EXAMPLE 4 @sink(type= report ,outputpath= /abc/example.pdf ,chart= Line ,chart.title= Line chart for the sample report. ,category= symbol ,series= price ,@map(type= json ))define stream BarStream(symbol string, price float, volume long); Under above configuration, for an event chunck,a report of type PDF will be generated.The report report will include a line chart with the specified chart title. The chart will be generated with the specified category and series. The report will be generated in the given output path. EXAMPLE 5 @sink(type= report , outputpath= /abc/example.pdf ,mode= query ,datasource.name= SAMPLE_DATASOURCE ,queries= [{ query : SELECT * FROM SampleTable; , chart : table },@map(type= json )) Under above configuration, for an event trigger,a report of type PDF will be generated.The report report will include a table with the data from the RDBMS datasource specifies as 'datasource.name' and the data from the query as specified in 'queries'. The report will be saved in the given output path. EXAMPLE 6 @sink(type= report , outputpath= /abc/example.pdf ,mode= query ,datasource.name= SAMPLE_DATASOURCE ,queries= [{ query : SELECT * FROM SampleTable; , chart : table },{ query : SELECT Value, Age FROM SampleTable; , chart : line , series : Value , category : Age , chart.title : Test chart }] , @map(type= json )) Under above configuration, for an event trigger,a report of type PDF will be generated. The will be two charts as per each RDBMS query. The datasource for both queries will be the value specified as 'datasource.name'. The first query will generate a table with the data from the query as specified in 'queries'. The second query will generate a line chart where the data will be taken from the second query as defined in the 'queries' parameter. The report will be saved in the given output path.","title":"API Docs - v1.0.0-SNAPSHOT"},{"location":"api/1.0.0-SNAPSHOT/#api-docs-v100-snapshot","text":"","title":"API Docs - v1.0.0-SNAPSHOT"},{"location":"api/1.0.0-SNAPSHOT/#sink","text":"","title":"Sink"},{"location":"api/1.0.0-SNAPSHOT/#report-sink","text":"Report sink can be used to publish (write) event data which is processed within siddhiinto reports. Siddhi-io-report provides support to generate reports in PDF format. Syntax @sink(type= report , outputpath= STRING , output.format= STRING , title= STRING , description= STRING , subtitle= STRING , template= STRING , dataset= STRING , header= STRING , footer= STRING , chart= STRING , chart.title= STRING , category= STRING , series= STRING , mode= STRING , queries= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic outputpath This parameter is used to specify the report path for data to be written. STRING No No output.format This parameter is used to specify the format of the report generated. Only PDF, XLS, XLSX, CSV are supported. PDF STRING Yes No title This parameter is used to specify the title of the report none STRING Yes No description This parameter is used to specify the description of the report. none STRING Yes No subtitle This parameter is used to specify the subtitle of the report none STRING Yes No template This parameter is used to specify an external JRXML template path to generate the report. The given template will be filled and generate the report accordingly. none STRING Yes No dataset This parameter is used to specify the dataset for the external template. This value can have a static stream attribute name or a dynamic value specified by '{}'eg:sink(type='report',dataset='{symbol}', @map(type='json'));define stream (symbol string, price float, volume long); none STRING Yes No header This parameter is used to specify the header image for the report. none STRING Yes No footer This parameter is used to specify the footer image for the report none STRING Yes No chart Used to specify the chart type in the report. The value can be 'line', 'bar', 'pie', 'table'. The chart is added into the report according to the parameter value. table STRING Yes No chart.title This parameter is used to specify the title of the chart. The title is added along with the chart. none STRING Yes No category This parameter is used to specify the category variable for the chart defined. The value of this parameter will be taken as the X axis of the chart. none STRING Yes No series This parameter is used to specify the series variable for the chart. The value of this parameter will be taken as the Y axis of the chart and it is necessary to provide numerical value for this parameter. none STRING Yes No mode This parameter is used to specify the series variable for the chart. The value of this parameter will be taken as the Y axis of the chart and it is necessary to provide numerical value for this parameter. stream STRING Yes No queries This parameter is used to specify the series variable for the chart. The value of this parameter will be taken as the Y axis of the chart and it is necessary to provide numerical value for this parameter. none STRING Yes No Examples EXAMPLE 1 @sink(type= report ,outputpath= /abc/example.pdf ,@map(type= json ))define stream BarStream(symbol string, price float, volume long); Under above configuration, for an event chunck,a report of type PDF will be generated. There will be a table in the report. EXAMPLE 2 @sink(type= report ,outputpath= /abc/{symbol}.pdf ,@map(type= json ))define stream BarStream(symbol string, price float, volume long); Under above configuration, for an event chunck,a report of type PDF will be generated. The name of the report will be the first event value of the symbol parameter in the stream. There will be a table in the report. EXAMPLE 3 @sink(type= report ,outputpath= /abc/example.pdf ,description= This is a sample report for the report sink. ,title= Sample Report ,subtitle= Report sink sample ,@map(type= json ))define stream BarStream(symbol string, price float, volume long); Under above configuration, for an event chunck,a report of type PDF will be generated. There will be a table in the report.The report title, description and subtitle will include the values specified as the parameters. The report will be generated in the given output path. EXAMPLE 4 @sink(type= report ,outputpath= /abc/example.pdf ,chart= Line ,chart.title= Line chart for the sample report. ,category= symbol ,series= price ,@map(type= json ))define stream BarStream(symbol string, price float, volume long); Under above configuration, for an event chunck,a report of type PDF will be generated.The report report will include a line chart with the specified chart title. The chart will be generated with the specified category and series. The report will be generated in the given output path. EXAMPLE 5 @sink(type= report , outputpath= /abc/example.pdf ,mode= query ,datasource.name= SAMPLE_DATASOURCE ,queries= [{ query : SELECT * FROM SampleTable; , chart : table },@map(type= json )) Under above configuration, for an event trigger,a report of type PDF will be generated.The report report will include a table with the data from the RDBMS datasource specifies as 'datasource.name' and the data from the query as specified in 'queries'. The report will be saved in the given output path. EXAMPLE 6 @sink(type= report , outputpath= /abc/example.pdf ,mode= query ,datasource.name= SAMPLE_DATASOURCE ,queries= [{ query : SELECT * FROM SampleTable; , chart : table },{ query : SELECT Value, Age FROM SampleTable; , chart : line , series : Value , category : Age , chart.title : Test chart }] , @map(type= json )) Under above configuration, for an event trigger,a report of type PDF will be generated. The will be two charts as per each RDBMS query. The datasource for both queries will be the value specified as 'datasource.name'. The first query will generate a table with the data from the query as specified in 'queries'. The second query will generate a line chart where the data will be taken from the second query as defined in the 'queries' parameter. The report will be saved in the given output path.","title":"report (Sink)"},{"location":"api/latest/","text":"API Docs - v1.0.0-SNAPSHOT Sink report (Sink) Report sink can be used to publish (write) event data which is processed within siddhiinto reports. Siddhi-io-report provides support to generate reports in PDF format. Syntax @sink(type= report , outputpath= STRING , output.format= STRING , title= STRING , description= STRING , subtitle= STRING , template= STRING , dataset= STRING , header= STRING , footer= STRING , chart= STRING , chart.title= STRING , category= STRING , series= STRING , mode= STRING , queries= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic outputpath This parameter is used to specify the report path for data to be written. STRING No No output.format This parameter is used to specify the format of the report generated. Only PDF, XLS, XLSX, CSV are supported. PDF STRING Yes No title This parameter is used to specify the title of the report none STRING Yes No description This parameter is used to specify the description of the report. none STRING Yes No subtitle This parameter is used to specify the subtitle of the report none STRING Yes No template This parameter is used to specify an external JRXML template path to generate the report. The given template will be filled and generate the report accordingly. none STRING Yes No dataset This parameter is used to specify the dataset for the external template. This value can have a static stream attribute name or a dynamic value specified by '{}'eg:sink(type='report',dataset='{symbol}', @map(type='json'));define stream (symbol string, price float, volume long); none STRING Yes No header This parameter is used to specify the header image for the report. none STRING Yes No footer This parameter is used to specify the footer image for the report none STRING Yes No chart Used to specify the chart type in the report. The value can be 'line', 'bar', 'pie', 'table'. The chart is added into the report according to the parameter value. table STRING Yes No chart.title This parameter is used to specify the title of the chart. The title is added along with the chart. none STRING Yes No category This parameter is used to specify the category variable for the chart defined. The value of this parameter will be taken as the X axis of the chart. none STRING Yes No series This parameter is used to specify the series variable for the chart. The value of this parameter will be taken as the Y axis of the chart and it is necessary to provide numerical value for this parameter. none STRING Yes No mode This parameter is used to specify the series variable for the chart. The value of this parameter will be taken as the Y axis of the chart and it is necessary to provide numerical value for this parameter. stream STRING Yes No queries This parameter is used to specify the series variable for the chart. The value of this parameter will be taken as the Y axis of the chart and it is necessary to provide numerical value for this parameter. none STRING Yes No Examples EXAMPLE 1 @sink(type= report ,outputpath= /abc/example.pdf ,@map(type= json ))define stream BarStream(symbol string, price float, volume long); Under above configuration, for an event chunck,a report of type PDF will be generated. There will be a table in the report. EXAMPLE 2 @sink(type= report ,outputpath= /abc/{symbol}.pdf ,@map(type= json ))define stream BarStream(symbol string, price float, volume long); Under above configuration, for an event chunck,a report of type PDF will be generated. The name of the report will be the first event value of the symbol parameter in the stream. There will be a table in the report. EXAMPLE 3 @sink(type= report ,outputpath= /abc/example.pdf ,description= This is a sample report for the report sink. ,title= Sample Report ,subtitle= Report sink sample ,@map(type= json ))define stream BarStream(symbol string, price float, volume long); Under above configuration, for an event chunck,a report of type PDF will be generated. There will be a table in the report.The report title, description and subtitle will include the values specified as the parameters. The report will be generated in the given output path. EXAMPLE 4 @sink(type= report ,outputpath= /abc/example.pdf ,chart= Line ,chart.title= Line chart for the sample report. ,category= symbol ,series= price ,@map(type= json ))define stream BarStream(symbol string, price float, volume long); Under above configuration, for an event chunck,a report of type PDF will be generated.The report report will include a line chart with the specified chart title. The chart will be generated with the specified category and series. The report will be generated in the given output path. EXAMPLE 5 @sink(type= report , outputpath= /abc/example.pdf ,mode= query ,datasource.name= SAMPLE_DATASOURCE ,queries= [{ query : SELECT * FROM SampleTable; , chart : table },@map(type= json )) Under above configuration, for an event trigger,a report of type PDF will be generated.The report report will include a table with the data from the RDBMS datasource specifies as 'datasource.name' and the data from the query as specified in 'queries'. The report will be saved in the given output path. EXAMPLE 6 @sink(type= report , outputpath= /abc/example.pdf ,mode= query ,datasource.name= SAMPLE_DATASOURCE ,queries= [{ query : SELECT * FROM SampleTable; , chart : table },{ query : SELECT Value, Age FROM SampleTable; , chart : line , series : Value , category : Age , chart.title : Test chart }] , @map(type= json )) Under above configuration, for an event trigger,a report of type PDF will be generated. The will be two charts as per each RDBMS query. The datasource for both queries will be the value specified as 'datasource.name'. The first query will generate a table with the data from the query as specified in 'queries'. The second query will generate a line chart where the data will be taken from the second query as defined in the 'queries' parameter. The report will be saved in the given output path.","title":"latest"},{"location":"api/latest/#api-docs-v100-snapshot","text":"","title":"API Docs - v1.0.0-SNAPSHOT"},{"location":"api/latest/#sink","text":"","title":"Sink"},{"location":"api/latest/#report-sink","text":"Report sink can be used to publish (write) event data which is processed within siddhiinto reports. Siddhi-io-report provides support to generate reports in PDF format. Syntax @sink(type= report , outputpath= STRING , output.format= STRING , title= STRING , description= STRING , subtitle= STRING , template= STRING , dataset= STRING , header= STRING , footer= STRING , chart= STRING , chart.title= STRING , category= STRING , series= STRING , mode= STRING , queries= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic outputpath This parameter is used to specify the report path for data to be written. STRING No No output.format This parameter is used to specify the format of the report generated. Only PDF, XLS, XLSX, CSV are supported. PDF STRING Yes No title This parameter is used to specify the title of the report none STRING Yes No description This parameter is used to specify the description of the report. none STRING Yes No subtitle This parameter is used to specify the subtitle of the report none STRING Yes No template This parameter is used to specify an external JRXML template path to generate the report. The given template will be filled and generate the report accordingly. none STRING Yes No dataset This parameter is used to specify the dataset for the external template. This value can have a static stream attribute name or a dynamic value specified by '{}'eg:sink(type='report',dataset='{symbol}', @map(type='json'));define stream (symbol string, price float, volume long); none STRING Yes No header This parameter is used to specify the header image for the report. none STRING Yes No footer This parameter is used to specify the footer image for the report none STRING Yes No chart Used to specify the chart type in the report. The value can be 'line', 'bar', 'pie', 'table'. The chart is added into the report according to the parameter value. table STRING Yes No chart.title This parameter is used to specify the title of the chart. The title is added along with the chart. none STRING Yes No category This parameter is used to specify the category variable for the chart defined. The value of this parameter will be taken as the X axis of the chart. none STRING Yes No series This parameter is used to specify the series variable for the chart. The value of this parameter will be taken as the Y axis of the chart and it is necessary to provide numerical value for this parameter. none STRING Yes No mode This parameter is used to specify the series variable for the chart. The value of this parameter will be taken as the Y axis of the chart and it is necessary to provide numerical value for this parameter. stream STRING Yes No queries This parameter is used to specify the series variable for the chart. The value of this parameter will be taken as the Y axis of the chart and it is necessary to provide numerical value for this parameter. none STRING Yes No Examples EXAMPLE 1 @sink(type= report ,outputpath= /abc/example.pdf ,@map(type= json ))define stream BarStream(symbol string, price float, volume long); Under above configuration, for an event chunck,a report of type PDF will be generated. There will be a table in the report. EXAMPLE 2 @sink(type= report ,outputpath= /abc/{symbol}.pdf ,@map(type= json ))define stream BarStream(symbol string, price float, volume long); Under above configuration, for an event chunck,a report of type PDF will be generated. The name of the report will be the first event value of the symbol parameter in the stream. There will be a table in the report. EXAMPLE 3 @sink(type= report ,outputpath= /abc/example.pdf ,description= This is a sample report for the report sink. ,title= Sample Report ,subtitle= Report sink sample ,@map(type= json ))define stream BarStream(symbol string, price float, volume long); Under above configuration, for an event chunck,a report of type PDF will be generated. There will be a table in the report.The report title, description and subtitle will include the values specified as the parameters. The report will be generated in the given output path. EXAMPLE 4 @sink(type= report ,outputpath= /abc/example.pdf ,chart= Line ,chart.title= Line chart for the sample report. ,category= symbol ,series= price ,@map(type= json ))define stream BarStream(symbol string, price float, volume long); Under above configuration, for an event chunck,a report of type PDF will be generated.The report report will include a line chart with the specified chart title. The chart will be generated with the specified category and series. The report will be generated in the given output path. EXAMPLE 5 @sink(type= report , outputpath= /abc/example.pdf ,mode= query ,datasource.name= SAMPLE_DATASOURCE ,queries= [{ query : SELECT * FROM SampleTable; , chart : table },@map(type= json )) Under above configuration, for an event trigger,a report of type PDF will be generated.The report report will include a table with the data from the RDBMS datasource specifies as 'datasource.name' and the data from the query as specified in 'queries'. The report will be saved in the given output path. EXAMPLE 6 @sink(type= report , outputpath= /abc/example.pdf ,mode= query ,datasource.name= SAMPLE_DATASOURCE ,queries= [{ query : SELECT * FROM SampleTable; , chart : table },{ query : SELECT Value, Age FROM SampleTable; , chart : line , series : Value , category : Age , chart.title : Test chart }] , @map(type= json )) Under above configuration, for an event trigger,a report of type PDF will be generated. The will be two charts as per each RDBMS query. The datasource for both queries will be the value specified as 'datasource.name'. The first query will generate a table with the data from the query as specified in 'queries'. The second query will generate a line chart where the data will be taken from the second query as defined in the 'queries' parameter. The report will be saved in the given output path.","title":"report (Sink)"}]}